<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    

    <title>James Black</title>
    <generator uri="https://github.com/jekyll/jekyll">Jekyll v2.4.0</generator>
		<icon>http://epijim.uk/apple-touch-icon-precomposed.png</icon>
    <subtitle>Jesuan and PhD student at Cambridge University</subtitle>
    <link href="http://epijim.uk/atom.xml" rel="self"/>
    <link href="http://epijim.uk/" rel="alternate" type="text/html"/>
    <updated>2014-10-27T20:32:00+00:00</updated>
    <id>http://epijim.uk/</id>
    <author>
			<name>James Black</name>
			<uri>http://epijim.uk/</uri>
			<email>james@epijim.uk</email>
		</author>

    
    <entry>
        <title>When is it nice in Cambridge (interactive app)?</title>
        <link href="http://epijim.uk/blog/when-cam-nice-app/"/>
        <updated>2014-10-25T00:00:00+01:00</updated>
        <id>http://epijim.uk/blog/when-cam-nice-app</id>
        <author>
					<name>James Black</name>
					<uri>http://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	&lt;img src=&quot;http://epijim.uk/images/weather_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;&lt;a href=&quot;http:epijim.uk/blog/when-cam-nice/&quot;&gt;Last week&lt;/a&gt; I plotted when the weather is nice in Cambridge.&lt;/p&gt;

&lt;p&gt;After getting pointed towards the University Weather Station data, I decided to recreate it
using the this better data source as an interactive app where people can define
what nice means themselves.&lt;/p&gt;

&lt;iframe src=&quot;http://epijim.shinyapps.io/IsItNice/&quot; name=&quot;weatherapp&quot; scrolling=&quot;auto&quot; frameborder=&quot;no&quot; align=&quot;center&quot; height=&quot;1000px&quot; width=&quot;700px&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;This app is built using R, and hosted on the free Shiny servers on ShinyApps.io.&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>When is it nice in Cambridge?</title>
        <link href="http://epijim.uk/blog/when-cam-nice/"/>
        <updated>2014-10-21T00:00:00+01:00</updated>
        <id>http://epijim.uk/blog/when-cam-nice</id>
        <author>
					<name>James Black</name>
					<uri>http://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	&lt;img src=&quot;http://epijim.uk/images/weather_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;As winter descends on Cambridge (it’s currently 8°C), I wondered if winter started
 this early last year. Earlier this year I came across a post
 where someone had plotted where in America
 the weather was most consistently nice.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; As part of the course I’m doing at the moment,
 I came across a script to call &lt;em&gt;Weather Underground&lt;/em&gt; for historical weather data.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Coupling
 this with R’s ability to plot calendar maps&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, it’s easy to visualise when it’s nice year to year.&lt;/p&gt;

&lt;h2 id=&quot;an-example-calendar-map&quot;&gt;An example calendar map&lt;/h2&gt;

&lt;p&gt;Below is an example of a calendar map produced in R. The API seems to consistently give
 missing values on the same days, a few times a year, so please excuse the white spaces.
 I think the problem is with the &lt;em&gt;Weather Underground&lt;/em&gt; data, as there are weird patterns to the missing data if you compare
 the API to the point and click historical values. For instance, lots of the days missing when using the
 API have a high of exactly 6.1°C when looking at the weather history via a browser.
 I was also more interested in general patterns, so I left the scale off these plots.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/weather_1.png&quot;&gt;&lt;img src=&quot;/images/weather_1.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Calendar map showing when it was warm in Cambridge in 2013.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;what-is-nice&quot;&gt;What is ‘nice’&lt;/h2&gt;

&lt;p&gt;In the next plot I’ve tried to categorize days into nice days (&lt;em&gt;in green&lt;/em&gt;), rainy days (&lt;em&gt;in blue&lt;/em&gt;)
and other days in grey. Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Green squares are days when the days maximum temperature was between 15 and 30°C and it did not rain&lt;/li&gt;
  &lt;li&gt;Blue squares are days with more than 1mm of rain&lt;/li&gt;
  &lt;li&gt;Grey squares are days that were too hot or too cold (and free of rain)&lt;/li&gt;
  &lt;li&gt;A few squares are white due to missing data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;when-its-nice-in-cambridge&quot;&gt;When it’s nice in Cambridge&lt;/h2&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/weather_2.png&quot;&gt;&lt;img src=&quot;/images/weather_2.png&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;Calendar map showing when it&#39;s been nice (green) and when it has rained (blue) in Cambridge over the last few years.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So by the looks of things, June-September is fairly consistently when the nice weather is, and the rain
 seems to be fairly evenly distributed. In the next plot, I’ve coded temperatures like in the first
 figure. Light red is around zero, darkest red is getting towards 32°C. Blue is any day with a high
 below 0°C.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/weather_3.png&quot;&gt;&lt;img src=&quot;/images/weather_3.png&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;Calendar map showing the daily highs in Cambridge. Light red is around zero, darkest red is getting towards 32&amp;deg;C. Blue is any day with a high
  below 0&amp;deg;C.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;I’ll add a link when I find the original again. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;The Weather Underground script is here: http://allthingsr.blogspot.co.uk/2012/04/getting-historical-weather-data-in-r.html &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;There are multiple options for plotting calendar maps in R. &lt;code&gt;gvisCalendar&lt;/code&gt; from the &lt;code&gt;googleVis&lt;/code&gt; package, or Nathan Yau’s custom script are two examples. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

        </content>
    </entry>
    
    <entry>
        <title>Optimum pub crawl route through all 71 Cambridge pubs</title>
        <link href="http://epijim.uk/blog/pub-crawl/"/>
        <updated>2014-10-05T00:00:00+01:00</updated>
        <id>http://epijim.uk/blog/pub-crawl</id>
        <author>
					<name>James Black</name>
					<uri>http://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	&lt;img src=&quot;http://epijim.uk/images/pub_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;script&gt;
 (function(d, t) {
    var g = d.createElement(t),
        s = d.getElementsByTagName(t)[0];
    g.src = &#39;http://assets.gfycat.com/js/gfyajax-0.517d.js&#39;;
    s.parentNode.insertBefore(g, s);
}(document, &#39;script&#39;));
&lt;/script&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [[&quot;$&quot;,&quot;$&quot;],[&quot;\\(&quot;,&quot;\\)&quot;]]}
  });
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;

&lt;p&gt;There are 71 pubs in Cambridge, which makes plotting the shortest possible
 route is going to be difficult. If I wanted to start at home, and visit all
 71 pubs there would be $(72-1)! = 8.5\times 10^{101}$ potential pub crawl routes. That
 kind of problem is often called the Travelling Salesman Problem, which was a popular
 English parlour game in the 1800’s&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Pub crawls tend to
 be a straight route though, so I need to solve a &lt;em&gt;hamilton path&lt;/em&gt; through the pubs.&lt;/p&gt;

&lt;p&gt;While there is an &lt;a href=&quot;http://cran.r-project.org/web/packages/TSP/&quot;&gt;R package called TSP&lt;/a&gt;
 devoted to solving these problems, I took a simplistic approach based off a
 Shiny app I hope to replicate at a later date.&lt;/p&gt;

&lt;h2 id=&quot;the-route&quot;&gt;The route&lt;/h2&gt;

&lt;p&gt;The plot below is a 30.3km route through all 71 pubs starting at the Wrestlers and ending at
 the Lord Bryon that was derived in about 40 seconds via simulated annealing.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crawl_1_route.png&quot;&gt;&lt;img src=&quot;/images/crawl_1_route.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;A 30.3km pub crawl route through all 71 Cambridge pubs.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;solving-the-problem&quot;&gt;Solving the problem&lt;/h2&gt;

&lt;p&gt;Simulated annealing is a technique inspired by annealing in metallurgy. In solving my pub crawl problem, the
 algorithm will initially be skewed toward picking longer routes, and as it continues to iterate
 it will slowly ‘cool’ and become more and more likely to choose a shorter route. This helps ensure the algorithm
 doesn’t get caught up in a local optimum route early. Sadly - just eyeballing - it appears
 the plot above is probably a local maximum. It looks like some travel time could be saved if
 the route visited the Mitre and Baron of Beef from the Pickerel, instead of it’s current
 diversion from the Brewhouse. I reran the model multiple times, and it usually found a route between 30 and 36km.&lt;/p&gt;

&lt;p&gt;The gif below is another run, but it shows the map, the cooling curve, the distance travelled,
 and a histogram of all the distances recorded across the iterations as the model runs. This example also
 illustrates how the algorithm can fail. Here it’s pretty obvious that starting at the Lord Byron Inn
 and ending at the Tally Ho is not going to be the optimum route.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;gfyitem&quot; data-id=&quot;SharpReflectingAntbear&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-favourite-pubs&quot;&gt;My favourite pubs&lt;/h2&gt;

&lt;p&gt;The last gif is 5.6km route through my favourite pubs,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Cambridge Brew House&lt;/li&gt;
  &lt;li&gt;The Eagle Public House&lt;/li&gt;
  &lt;li&gt;The Regal&lt;/li&gt;
  &lt;li&gt;The Flying Pig&lt;/li&gt;
  &lt;li&gt;The Cambridge Blue&lt;/li&gt;
  &lt;li&gt;The Elm Tree&lt;/li&gt;
  &lt;li&gt;Old Spring Public House&lt;/li&gt;
  &lt;li&gt;King Street Run Public House&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&quot;gfyitem&quot; data-id=&quot;HarmoniousBlackIrrawaddydolphin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once again, a quick visual inspection shows that some travel time could be saved with minor
 tweaks to the last graph. While I still have long term plans to make a Cambridge interactive
 pub crawl app via R (and shiny), for now the following XKCD plot sums up what this has taught me -
 I just found a really complicated way to plot a pub crawl route which can be easily beaten
 by a person, as long as you’re planning on visiting less than 20ish pubs.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crawl_2_xkcd.png&quot;&gt;&lt;img src=&quot;/images/crawl_2_xkcd.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;An XKCD cartoon on the Travelling Salesman Problem.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;my-function&quot;&gt;My function&lt;/h2&gt;

&lt;p&gt;I wrapped up the code&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; in a function, which can be called from github.&lt;/p&gt;

&lt;h3 id=&quot;load-the-function&quot;&gt;Load the function&lt;/h3&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;devtools&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;devtools&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
source_gist&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://gist.github.com/epijim/8f4be4dae598e479add0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;ggmap&lt;/code&gt; is required to run this function.&lt;/p&gt;

&lt;h3 id=&quot;input-variables&quot;&gt;Input variables&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;v_pubs&lt;/code&gt; - either a list of pubs &lt;code&gt;c(pub1,pub2)&lt;/code&gt; or a dataset with the latitude in
 the first column and the longitude in the second. If feeding in a dataset, you also
 need to set &lt;code&gt;cam_pubs=FALSE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;crow_distances&lt;/code&gt; - defaults to &lt;code&gt;FALSE&lt;/code&gt;. If set to &lt;code&gt;FALSE&lt;/code&gt;, and &lt;code&gt;cam_pubs=TRUE&lt;/code&gt; (the default),
 the function will calculate the best route using Google maps based distance or time to walk. If
 &lt;code&gt;crow_distances=TRUE&lt;/code&gt;, the function will use straight line distances (taking into
   account the Earth’s curvature). If &lt;code&gt;cam_pubs=FALSE&lt;/code&gt;,
 the function will always use straight line (&lt;em&gt;as the crow flies&lt;/em&gt; data).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;units&lt;/code&gt; - Defaults to &lt;code&gt;&quot;minutes&quot;&lt;/code&gt;, which makes the function calculate the route based on
 the Google maps derived walking time. Can also be set to &lt;code&gt;&quot;metres&quot;&lt;/code&gt;, which will make the
 function use and report the distance of the crawl in metres based on Google maps directions.
 This option is only evaluated if &lt;code&gt;crow_distances=FALSE&lt;/code&gt; and you are using the
 inbuilt pub data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v_location&lt;/code&gt; - defaults to &lt;code&gt;&quot;Cambridge, UK&quot;&lt;/code&gt;. This value is given to &lt;code&gt;ggmap&lt;/code&gt; when pulling
 the base map. Only really needed if feeding in a different dataset. If using a different
 basemap, &lt;code&gt;v_zoom&lt;/code&gt; will allow the zoom on the base map to be set.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;listpubs&lt;/code&gt; - defaults to &lt;code&gt;FALSE&lt;/code&gt;. If set to &lt;code&gt;TRUE&lt;/code&gt; the function will print the list of pubs
 and then exit the function (ignoring all other options and not running the model). I
 added this as the pub names need to be entered in perfectly into &lt;code&gt;v_pubs&lt;/code&gt; for it to
 work.&lt;/p&gt;

&lt;h3 id=&quot;use&quot;&gt;Use&lt;/h3&gt;

&lt;p&gt;The function, when loaded, will pull data from another gist which has the pubs in it.
 You can see the names of the pubs by typing &lt;code&gt;jb_pubdistance(listpubs=T)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical call to the function would be:&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;results &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; jb_pubdistance&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;v_pubs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The Maypole P.H.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The Eagle Public House&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;s&quot;&gt;&amp;quot;Pickerel Inn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Baron Of Beef&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the example above, we will get the default format for the results, which is based on
 what google claims is the default walking time. See &lt;em&gt;Input variables&lt;/em&gt; above on how to
 feed in custom data, or get back the distance in metres in actual walking routes, or as
 the crow flies.&lt;/p&gt;

&lt;p&gt;So by setting &lt;code&gt;&amp;lt;-&lt;/code&gt;, we created an object called &lt;code&gt;results&lt;/code&gt;. The following
 results are stored.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;results$distance&lt;/code&gt; - the distance of the pub crawl&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;results$pubs_inorder&lt;/code&gt; - the pubs in order. If using my pubs data, it will give some info on the pubs. If feeding in custom lats and lons, it will be the original dataset in trip order.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;results$temperature&lt;/code&gt; - the temperature values used over the iterations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function will also return a plot showing the route.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Icosian_game&quot;&gt;Icosian game&lt;/a&gt; was a peg based game invented in 1857. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;This function just gives the final route, not the gifs of how the model was fit. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

        </content>
    </entry>
    
    <entry>
        <title>Distance to the nearest pub</title>
        <link href="http://epijim.uk/blog/pub-distances/"/>
        <updated>2014-10-04T00:00:00+01:00</updated>
        <id>http://epijim.uk/blog/pub-distances</id>
        <author>
					<name>James Black</name>
					<uri>http://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	&lt;img src=&quot;http://epijim.uk/images/pub_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;The plot below shows the distance to the nearest pub, from a grid of
 spots in Cambridge. Starting in the top left of the green box, I ran a script that calls 
 the &lt;code&gt;Google Distance Matrix API&lt;/code&gt; to ask where the nearest pub is. It then moves a little to the right, 
 and asks again. When it hits the far side of the box, it drops down and 
 makes a new row of calls. Distances are coloured based on the time Google says it will take 
 to walk from that spot to the pub. I originally made this plot last year using Google’s data on Cambridge pubs, 
 but the data Google has is very inaccurate. The Food Standards Agency though has a daily 
 updated &lt;a href=&quot;http://ratings.food.gov.uk/open-data/en-GB&quot;&gt;XML file&lt;/a&gt;, which has every pub nicely geo-coded. 
 This updated plot should be far more accurate.&lt;/p&gt;

&lt;h2 id=&quot;the-plot&quot;&gt;The plot&lt;/h2&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/pub_1_timeto.jpg&quot;&gt;&lt;img src=&quot;/images/pub_1_timeto.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Time to walk to the nearest pub from a grid of points in Cambridge. The black dots are the pubs.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;the-old-plot&quot;&gt;The old plot&lt;/h2&gt;

&lt;p&gt;Google only allows 2,500 calls to the distance API a day, and there are 1,600 points in my grid. This means
 it would take days to find out the walking distance to every pub. When I first made this plot 
 I simply went with the closest pub as the crow flies. When updating, I decided to look at the 
 walking distance to the two closest pubs. The plot below is using the method from my old post, 
 where I assumed the closest in a straight line was also the closest when walking.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/pub_2_googledist.jpg&quot;&gt;&lt;img src=&quot;/images/pub_2_googledist.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Using the method of my original plot, which doesn&#39;t account for the fact that the straight line difference isn&#39;t always the closest if you walk there.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;where-i-went-wrong&quot;&gt;Where I went wrong&lt;/h2&gt;

&lt;p&gt;While the difference between the two plots above are a little hard to make out, the plot below shows all the points in my
 grid where the shortest as the crow flies is not the shortest when walking. I made this post in one day, and only had 
 access to three API keys (I maxed out my own, Tina’s and the college IP address for day). 
 This meant I could only check the three closest pubs in a straight line. I’m fairly confident 
 the 316 (20%) points I found where the closest in a straight line, and walking, is different, covers all of the cases. The 
 only potential problem is that shortcuts through colleges and greens aren’t currently accounted for. 
 The plot below shows where the first post I made of distance to the nearest pub was wrong.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/pub_3_closest.png&quot;&gt;&lt;img src=&quot;/images/pub_3_closest.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;The x&#39;s represent places where my original plot was wrong.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;pub-dense-areas&quot;&gt;Pub dense areas&lt;/h2&gt;

&lt;p&gt;The following plot simply shows where the nearest pub is.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/pub_4_contour.jpg&quot;&gt;&lt;img src=&quot;/images/pub_4_contour.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Where the pubs are clustered. As I also have their Food Safety ratings for the 3rd of October, 2014, I added that in as well.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;the-pubs&quot;&gt;The pubs&lt;/h2&gt;

&lt;p&gt;Finally, a google map of where all the pubs are.&lt;/p&gt;

&lt;iframe width=&quot;800&quot; height=&quot;500&quot; src=&quot;http://epijim.uk/iframecontent/pubgooglemap.html&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;And a table of the name of the pub, and their food safety rating (as this data originally came from
 the FSA). The food safety data was based on what it was on the 3rd of October, 2014.&lt;/p&gt;

&lt;iframe width=&quot;800&quot; height=&quot;500&quot; src=&quot;http://epijim.uk/iframecontent/pubgoogletable.html&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-to&quot;&gt;How to&lt;/h2&gt;

&lt;p&gt;Nathan Yau wrote a brilliant book called Datapoints&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, where he introduces this style of
 map, and it is from there that based the code to handle the geo-coding. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Below are links to some snippets I used to make this plot&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://epijim.uk/code/scrapexml/&quot;&gt;Pull data&lt;/a&gt; from the online XML file&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://epijim.uk/code/googleapi/&quot;&gt;Feed data&lt;/a&gt; to the &lt;code&gt;Google Distance Matrix API&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Nathan Yau (&lt;strong&gt;2013&lt;/strong&gt;) &lt;em&gt;Data Points: Visualization That Means Something&lt;/em&gt;, ISBN: 978-1-118-46219-5 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

        </content>
    </entry>
    
    <entry>
        <title>Using Google API</title>
        <link href="http://epijim.uk/code/googleapi/"/>
        <updated>2014-10-04T00:00:00+01:00</updated>
        <id>http://epijim.uk/code/googleapi</id>
        <author>
					<name>James Black</name>
					<uri>http://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	
        	&lt;p&gt;The following is the function I used to make my blog post on the distance to the nearest pub.
 This function was used to get the walking distance and time from a point I specified, to the
 nearest pub.&lt;/p&gt;

&lt;h2 id=&quot;getting-an-api-key&quot;&gt;Getting an API key&lt;/h2&gt;

&lt;p&gt;You don’t always need an API key, as google will often allow requests based on your IP,
 but getting a key often means you are allowed to make more calls. Plus my current IP at
 Cambridge University seems to be responsible for a lot of keyless API requests, so it’s
 often maxed out.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://console.developers.google.com&quot;&gt;Google API console is here&lt;/a&gt;. Simply set up a project,
 then create a browser key. You can limit requests to your own IP address to prevent someone
 else using it (say if you accidentally share the key), or leave that field blank and let
 anyone with the key use it.&lt;/p&gt;

&lt;h2 id=&quot;the-available-apis-at-google&quot;&gt;The available APIs at google&lt;/h2&gt;

&lt;p&gt;There are heaps of APIs out there, but I’m focusing on Google’s as they are really well
 documented. The list of APIs available from Google is &lt;a href=&quot;https://developers.google.com/apis-explorer/&quot;&gt;here&lt;/a&gt;.
 The one I want is the &lt;code&gt;Google Distance Matrix API&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which is part of the maps API.&lt;/p&gt;

&lt;h2 id=&quot;the-function&quot;&gt;The function&lt;/h2&gt;

&lt;p&gt;Function to take the latitude and longitude of two points, actually make the call,
 and spit out an object with the distance and time. The function has four inputs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt; is the latitude and longitude in the format &lt;code&gt;&quot;latitude,longitude&quot;&lt;/code&gt;. It can also take
 text like &lt;code&gt;&quot;Jesus College, Cambridge, UK&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; is what mode of travel you want. The options are &lt;code&gt;&quot;driving&quot;&lt;/code&gt;, &lt;code&gt;&quot;walking&quot;&lt;/code&gt; and &lt;code&gt;&quot;bicycling&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is your API key.&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;latlon2ft &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;origin&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;destination&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    xml.url &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;paste0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;#39;https://maps.googleapis.com/maps/api/distancematrix/xml?origins=&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      origin&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;amp;destinations=&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      destination&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;amp;mode=&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      &amp;amp;key=&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      key&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;amp;sensor=false&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    xmlfile &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; xmlParse&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;getURL&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;xml.url&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    time &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; xmlValue&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;xmlChildren&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;xpathApply&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;xmlfile&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//duration&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;value&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    time &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;as.numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;time&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    dist &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; xmlValue&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;xmlChildren&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;xpathApply&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;xmlfile&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//distance&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;value&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    distance &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;as.numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; km&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;dist&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    output &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;time&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;distance&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;output&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/distancematrix/&quot;&gt;Documentation&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

        </content>
    </entry>
    
</feed>

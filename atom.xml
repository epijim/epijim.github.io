<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    

    <title>James Black</title>
    <generator uri="https://github.com/jekyll/jekyll">Jekyll v2.4.0</generator>
		<icon>https://epijim.uk/apple-touch-icon-precomposed.png</icon>
    <subtitle>Jesuan and PhD student at Cambridge University</subtitle>
    <link href="https://epijim.uk/atom.xml" rel="self"/>
    <link href="https://epijim.uk/" rel="alternate" type="text/html"/>
    <updated>2015-03-31T22:00:35+01:00</updated>
    <id>https://epijim.uk/</id>
    <author>
			<name>James Black</name>
			<uri>https://epijim.uk/</uri>
			<email>james@epijim.uk</email>
		</author>

    
    <entry>
        <title>Parental perception of child obesity</title>
        <link href="https://epijim.uk/papers/paper5/"/>
        <updated>2015-03-30T00:00:00+01:00</updated>
        <id>https://epijim.uk/papers/paper5</id>
        <author>
					<name>James Black</name>
					<uri>https://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	
        	&lt;h2 id=&quot;background-problem&quot;&gt;Background problem&lt;/h2&gt;

&lt;p&gt;There is a known disconnect between when parents recognise obesity in their own child, and how experts define obesity based on objective measurements of height and weight (expressed as age-specific BMI centiles). The &lt;em&gt;expert&lt;/em&gt; BMI cut offs, typically used in the UK, are based off the centile points at which obesity is assumed to have a negative impact on health (either now or in the future) from a distribution of BMIs representative of children in the early 1990’s. This is why a histogram of BMI centiles of children now is no longer a nice bell curve - and much more than half of kids today have a BMI centile above 50.&lt;/p&gt;

&lt;p&gt;The discrepancy between how parents and doctors define obesity has not been explained simply. A fundamental problem in tackling obesity is that as more and more of a child’s friends have excess weight, parents also appear to recognise obesity at higher and higher BMI centiles.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;In the study I was working on at LSHTM, led by Dr Sanjay Kinra, we had BMI of all children aged 4-5 and 10-11 from 5 primary care trusts that was routinely collected by school nurses, alongside a questionnaire where parents told us whether they believed their child was underweight, healthy weight, overweight or very overweight. While researching a methodological problem for another analysis, I came across a paper in &lt;em&gt;Stats Med&lt;/em&gt; on how to take paired continuous and multinomial data, build a multinomial model, and back calculate the ‘cut points’ that would say at what level of the continuous predictor (BMI centile), the multinomial categories (parent reported weight status) were most likely. Effectively, I could calculate weight status cut offs on the BMI centile scale that represent how parents see their own child.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;Measured BMI centile was matched with parent classification of weight status in 2976 children. Parents become more likely to classify their children as underweight when they are at the 0.8th centile or below, and overweight at the 99.7th centile or above. Parents were more likely to underestimate a child’s weight if the child was black or South Asian, male, more deprived, or the child was older. These values differ greatly from the BMI centile cut-offs for underweight (2nd centile) and overweight (85th).&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/paper5_figure.jpg&quot;&gt;&lt;img src=&quot;/images/paper5_figure.jpg&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Probability of child’s caregiver classifying their weight as underweight, healthy, or overweight against National Child Measurement Programme (NCMP)-measured body mass index centile in 2976 British children.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Black, J.A., Park, M., Gregson, J., Falconer, C.L., White, B., Kessel, A.S., Saxena, S., Viner, R.M., Kinra, S.&lt;/em&gt; (2015)
&lt;strong&gt;Child obesity cut-offs as derived from parental perceptions: cross-sectional questionnaire.&lt;/strong&gt;
British Journal of General Practice, e234-49. doi:10.3399/bjgp15X684385&lt;/p&gt;

&lt;h2 id=&quot;media-coverage&quot;&gt;Media coverage&lt;/h2&gt;

&lt;p&gt;This paper was covered by multiple news outlets, including the Gaurdian, Telegraph, Scotsman and BBC. Below are a list of links to articles to the paper I first authored, followed by a video by the BBC summarising the findings.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NHS Choices&lt;/strong&gt;, &lt;a href=&quot;http://www.nhs.uk/news/2015/03March/Pages/Parents-fail-to-spot-that-their-kids-are-obese.aspx&quot;&gt;Parents fail to spot that their kids are obese&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BBC News&lt;/strong&gt;, &lt;a href=&quot;http://www.bbc.co.uk/news/health-32069699&quot;&gt;Parents rarely spot child obesity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Guardian&lt;/strong&gt;, &lt;a href=&quot;http://www.theguardian.com/society/2015/mar/30/parents-of-obese-children-unable-to-recognise-child-is-overweight&quot;&gt;Obesity: parents unable to recognise if child is overweight&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Scotsman&lt;/strong&gt;, &lt;a href=&quot;http://www.scotsman.com/news/health/parents-cannot-tell-if-their-children-are-obese-experts-find-1-3732665&quot;&gt;Parents cannot tell if their children are obese, experts find&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Telegraph&lt;/strong&gt;, &lt;a href=&quot;http://www.telegraph.co.uk/news/health/news/11503399/Parents-hardly-ever-spot-obesity-in-their-children.html&quot;&gt;Just one in 100 parents spot obesity in their children&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Forbes&lt;/strong&gt;, &lt;a href=&quot;Can You Tell If Your Child Is Overweight? Most Parents Can&#39;t, Study Finds&quot;&gt;Can You Tell If Your Child Is Overweight? Most Parents Can’t, Study Finds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Times&lt;/strong&gt;, &lt;a href=&quot;http://www.thetimes.co.uk/tto/health/news/article4396592.ece&quot;&gt;Parents fail to see that their own children are fat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ITV news&lt;/strong&gt;, &lt;a href=&quot;http://www.itv.com/news/2015-03-30/parents-do-not-recognise-their-own-childs-obesity/&quot;&gt;Parents ‘do not recognise their own child’s obesity’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Belfast Telegraph&lt;/strong&gt;, &lt;a href=&quot;http://www.belfasttelegraph.co.uk/news/uk/many-underestimate-childs-weight-31104074.html&quot;&gt;Many ‘underestimate child’s weight’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Medical Express&lt;/strong&gt;, &lt;a href=&quot;http://medicalxpress.com/news/2015-03-gap-parental-perceptions-child-weight.html&quot;&gt;Gap between parental perceptions of child’s weight and official classifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Mirror&lt;/strong&gt;, &lt;a href=&quot;http://www.mirror.co.uk/news/technology-science/science/your-child-obese-parents-rarely-5426715&quot;&gt;Is your child obese? Parents rarely recognise that their child is very overweight&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Mirror data blog&lt;/strong&gt;, &lt;a href=&quot;Obesity: Young girls are more likely than boys to be seen as overweight&quot;&gt;Obesity: Young girls are more likely than boys to be seen as overweight&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Daily Mail&lt;/strong&gt;, &lt;a href=&quot;http://www.dailymail.co.uk/health/article-3017657/The-rise-WEIGHT-BLINDNESS-parents-recognise-obese-child-fat.html&quot;&gt;The rise of WEIGHT blindness: A third of parents underestimate their child’s weight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/4sP-SE7ED2A?rel=0&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

        </content>
    </entry>
    
    <entry>
        <title>When is it nice in Cambridge (interactive app)?</title>
        <link href="https://epijim.uk/blog/when-cam-nice-app/"/>
        <updated>2014-10-25T00:00:00+01:00</updated>
        <id>https://epijim.uk/blog/when-cam-nice-app</id>
        <author>
					<name>James Black</name>
					<uri>https://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	&lt;img src=&quot;https://epijim.uk/images/weather_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;&lt;a href=&quot;http:epijim.uk/blog/when-cam-nice/&quot;&gt;Last week&lt;/a&gt; I plotted when the weather is nice in Cambridge.&lt;/p&gt;

&lt;p&gt;After getting pointed towards the University Weather Station data, I decided to recreate it
using the this better data source as an interactive app where people can define
what nice means themselves.&lt;/p&gt;

&lt;iframe src=&quot;http://epijim.shinyapps.io/IsItNice/&quot; name=&quot;weatherapp&quot; scrolling=&quot;auto&quot; frameborder=&quot;no&quot; align=&quot;center&quot; height=&quot;1000px&quot; width=&quot;700px&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;This app is built using R, and hosted on the free Shiny servers on ShinyApps.io.&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>When is it nice in Cambridge?</title>
        <link href="https://epijim.uk/blog/when-cam-nice/"/>
        <updated>2014-10-21T00:00:00+01:00</updated>
        <id>https://epijim.uk/blog/when-cam-nice</id>
        <author>
					<name>James Black</name>
					<uri>https://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	&lt;img src=&quot;https://epijim.uk/images/weather_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;As winter descends on Cambridge (it’s currently 8°C), I wondered if winter started
 this early last year. Earlier this year I came across a post
 where someone had plotted where in America
 the weather was most consistently nice.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; As part of the course I’m doing at the moment,
 I came across a script to call &lt;em&gt;Weather Underground&lt;/em&gt; for historical weather data.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Coupling
 this with R’s ability to plot calendar maps&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, it’s easy to visualise when it’s nice year to year.&lt;/p&gt;

&lt;h2 id=&quot;an-example-calendar-map&quot;&gt;An example calendar map&lt;/h2&gt;

&lt;p&gt;Below is an example of a calendar map produced in R. The API seems to consistently give
 missing values on the same days, a few times a year, so please excuse the white spaces.
 I think the problem is with the &lt;em&gt;Weather Underground&lt;/em&gt; data, as there are weird patterns to the missing data if you compare
 the API to the point and click historical values. For instance, lots of the days missing when using the
 API have a high of exactly 6.1°C when looking at the weather history via a browser.
 I was also more interested in general patterns, so I left the scale off these plots.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/weather_1.png&quot;&gt;&lt;img src=&quot;/images/weather_1.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Calendar map showing when it was warm in Cambridge in 2013.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;what-is-nice&quot;&gt;What is ‘nice’&lt;/h2&gt;

&lt;p&gt;In the next plot I’ve tried to categorize days into nice days (&lt;em&gt;in green&lt;/em&gt;), rainy days (&lt;em&gt;in blue&lt;/em&gt;)
and other days in grey. Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Green squares are days when the days maximum temperature was between 15 and 30°C and it did not rain&lt;/li&gt;
  &lt;li&gt;Blue squares are days with more than 1mm of rain&lt;/li&gt;
  &lt;li&gt;Grey squares are days that were too hot or too cold (and free of rain)&lt;/li&gt;
  &lt;li&gt;A few squares are white due to missing data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;when-its-nice-in-cambridge&quot;&gt;When it’s nice in Cambridge&lt;/h2&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/weather_2.png&quot;&gt;&lt;img src=&quot;/images/weather_2.png&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;Calendar map showing when it&#39;s been nice (green) and when it has rained (blue) in Cambridge over the last few years.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So by the looks of things, June-September is fairly consistently when the nice weather is, and the rain
 seems to be fairly evenly distributed. In the next plot, I’ve coded temperatures like in the first
 figure. Light red is around zero, darkest red is getting towards 32°C. Blue is any day with a high
 below 0°C.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/weather_3.png&quot;&gt;&lt;img src=&quot;/images/weather_3.png&quot; /&gt;&lt;/a&gt;
  &lt;figcaption&gt;Calendar map showing the daily highs in Cambridge. Light red is around zero, darkest red is getting towards 32&amp;deg;C. Blue is any day with a high
  below 0&amp;deg;C.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;I’ll add a link when I find the original again. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;The Weather Underground script is here: http://allthingsr.blogspot.co.uk/2012/04/getting-historical-weather-data-in-r.html &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;There are multiple options for plotting calendar maps in R. &lt;code&gt;gvisCalendar&lt;/code&gt; from the &lt;code&gt;googleVis&lt;/code&gt; package, or Nathan Yau’s custom script are two examples. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

        </content>
    </entry>
    
    <entry>
        <title>Contour mapping Cambridge crime</title>
        <link href="https://epijim.uk/blog/crime-cambridge/"/>
        <updated>2014-10-19T00:00:00+01:00</updated>
        <id>https://epijim.uk/blog/crime-cambridge</id>
        <author>
					<name>James Black</name>
					<uri>https://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	&lt;img src=&quot;https://epijim.uk/images/crimes_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;The Cambridge Constabulary &lt;a href=&quot;http://data.police.uk/data/&quot;&gt;has location data&lt;/a&gt; on just over 280,000 crimes that have happened
 between December 2010 and October 2013. It’s just too great of a dataset not to take a look…&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crimes_1.png&quot;&gt;&lt;img src=&quot;/images/crimes_1.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Crime density across the county.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Not surprisingly, the majority of crimes take place where the people are.
 So what about in Cambridge?&lt;/p&gt;

&lt;p&gt;Each point below is a crime, and they are coded by the 16 types of crime that the police
 have pre-categorised. I didn’t bother with a key, as 16 is just too much to
 get my head around at once.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crimes_2.png&quot;&gt;&lt;img src=&quot;/images/crimes_2.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Two years of Cambridge crime plotted.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Below is the same map, focusing on the four types of crimes that looked interesting to me.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Antisocial behavior (I’m going to call them ASBOs, although really they are incidents not convictions or actual orders)&lt;/li&gt;
  &lt;li&gt;Burglaries&lt;/li&gt;
  &lt;li&gt;Drug related arrests&lt;/li&gt;
  &lt;li&gt;Bicycle thefts&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crimes_3.png&quot;&gt;&lt;img src=&quot;/images/crimes_3.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Stripping the 16 types down to just the four I&#39;m interested in.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;While it’s possible to see a possible clustering of bicycle thefts in the centre of town,
 and (not suprisingly) most burglaries seem to take place out of the centre,
 it’s still hard to make out any patterns.&lt;/p&gt;

&lt;p&gt;So is there really difference on where the crimes happen? Overlying the four types gets
 really messy. Below is the same four crime types overlaid. I removed the map entirely as
 it’s already so cluttered, and I was mainly interested in how they overlapped.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crimes_4.png&quot;&gt;&lt;img src=&quot;/images/crimes_4.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;A rather messy contour plot of the four crimes densities.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Below is a density map of the 9 most common crimes. Shoplifting seems to be focused on the
 shopping malls, burglaries have a pretty decent spread. Interestingly,
 there isn’t many bikes stolen from West Cambridge.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crimes_5.png&quot;&gt;&lt;img src=&quot;/images/crimes_5.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Nine types of crime as density plots.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Looking at the four most interesting (to me) in detail, below.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crimes_6.png&quot;&gt;&lt;img src=&quot;/images/crimes_6.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Zooming in on just the four most interesting.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Over the last 2 years, and within the bounds of my Cambridge maps, there were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;16,534 ASBOs&lt;/li&gt;
  &lt;li&gt;2535 burglaries&lt;/li&gt;
  &lt;li&gt;1502 drug related incidents&lt;/li&gt;
  &lt;li&gt;1100 bicycle thefts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before I can use these plots I need to work out how to set the density scale as constant.
 The scales of a density plot, at least to me, are pretty random (it went up to 2,200)
 for the plots above. As far as I can tell from the documentation, in the plot above,
 it’s a common scale across each panel of the plot, but if you look at the numbers,
 that doesn’t seem to be the case.&lt;/p&gt;

&lt;p&gt;Below is the four plots individually, where the density limits vary. Definitely something
 I need to figure out before using these plots for real.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crimes_7.gif&quot;&gt;&lt;img src=&quot;/images/crimes_7.gif&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Cycling through the types.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Below is the script to load up the csv’s, as you get them from
 &lt;a href=&quot;http://data.police.uk/data/&quot;&gt;the police website&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;kp&quot;&gt;setwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Directoy where the data is saved&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;plyr&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# used to read in csvs&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;psych&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# has the describe function&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;################&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# import data  #&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;################&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Data is in monthly CSV&amp;#39;s, so loop over them pulling in data&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# CAREFUL this will get all .csv names in directory&lt;/span&gt;
  temp_filenames &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;list.files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;pattern&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*.csv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#Now we have a list of the csv names, read them into one data frame&lt;/span&gt;
  crime_data &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; ldply&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;temp_filenames&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; read.csv&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#could do in full like below, but prefer the shorter method above using plyr&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#crime_data &amp;lt;- do.call(&amp;quot;rbind&amp;quot;, lapply(temp, read.csv, header = TRUE))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# take a gander!&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;crime_data&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;crime_data&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  describe&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;crime_data&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  str&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;crime_data&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# so 228, 949 crimes are in the database,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# seems most the crime ID stuff came in later, and ties into the seperate&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# outcome data. Same with context. For now I&amp;#39;ll focus on location,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# time and type of crime&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#DATA ISSUES. Time is a factor variable.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now plot it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;theme_bare &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; theme&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;axis.line &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; element_blank&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                      axis.text.x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; element_blank&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                      axis.text.y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; element_blank&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                      axis.ticks &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; element_blank&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                      axis.title.x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; element_blank&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                      axis.title.y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; element_blank&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                      legend.position &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

cambridge &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; get_map&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Cambridge, UK&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; zoom&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bw&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;osm&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

CambridgeMap &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; ggmap&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;cambridge&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; baselayer &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ggplot&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;aes&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Longitude&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Latitude&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                                    data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;crime_data&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

CambridgeMap &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; stat_density2d&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;aes&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; x&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Longitude&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Latitude&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   fill&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;..&lt;/span&gt;level.. &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; alpha&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;..&lt;/span&gt;level.. &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                              data&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;crime_data&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; bins&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;geom &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;polygon&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                              scale_fill_gradient&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;low &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; high &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                              facet_wrap&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; Crime.type&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; theme_bare&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


        </content>
    </entry>
    
    <entry>
        <title>Optimum pub crawl route through all 71 Cambridge pubs</title>
        <link href="https://epijim.uk/blog/pub-crawl/"/>
        <updated>2014-10-05T00:00:00+01:00</updated>
        <id>https://epijim.uk/blog/pub-crawl</id>
        <author>
					<name>James Black</name>
					<uri>https://epijim.uk/</uri>
					<email>james@epijim.uk</email>
				</author>
        <content type="html">
        	&lt;img src=&quot;https://epijim.uk/images/pub_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;script&gt;
 (function(d, t) {
    var g = d.createElement(t),
        s = d.getElementsByTagName(t)[0];
    g.src = &#39;http://assets.gfycat.com/js/gfyajax-0.517d.js&#39;;
    s.parentNode.insertBefore(g, s);
}(document, &#39;script&#39;));
&lt;/script&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [[&quot;$&quot;,&quot;$&quot;],[&quot;\\(&quot;,&quot;\\)&quot;]]}
  });
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;

&lt;p&gt;There are 71 pubs in Cambridge, which makes plotting the shortest possible
 route is going to be difficult. If I wanted to start at home, and visit all
 71 pubs there would be $(72-1)! = 8.5\times 10^{101}$ potential pub crawl routes. That
 kind of problem is often called the Travelling Salesman Problem, which was a popular
 English parlour game in the 1800’s&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Pub crawls tend to
 be a straight route though, so I need to solve a &lt;em&gt;hamilton path&lt;/em&gt; through the pubs.&lt;/p&gt;

&lt;p&gt;While there is an &lt;a href=&quot;http://cran.r-project.org/web/packages/TSP/&quot;&gt;R package called TSP&lt;/a&gt;
 devoted to solving these problems, I took a simplistic approach based off a
 Shiny app I hope to replicate at a later date.&lt;/p&gt;

&lt;h2 id=&quot;the-route&quot;&gt;The route&lt;/h2&gt;

&lt;p&gt;The plot below is a 30.3km route through all 71 pubs starting at the Wrestlers and ending at
 the Lord Bryon that was derived in about 40 seconds via simulated annealing.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crawl_1_route.png&quot;&gt;&lt;img src=&quot;/images/crawl_1_route.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;A 30.3km pub crawl route through all 71 Cambridge pubs.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;solving-the-problem&quot;&gt;Solving the problem&lt;/h2&gt;

&lt;p&gt;Simulated annealing is a technique inspired by annealing in metallurgy. In solving my pub crawl problem, the
 algorithm will initially be skewed toward picking longer routes, and as it continues to iterate
 it will slowly ‘cool’ and become more and more likely to choose a shorter route. This helps ensure the algorithm
 doesn’t get caught up in a local optimum route early. Sadly - just eyeballing - it appears
 the plot above is probably a local maximum. It looks like some travel time could be saved if
 the route visited the Mitre and Baron of Beef from the Pickerel, instead of it’s current
 diversion from the Brewhouse. I reran the model multiple times, and it usually found a route between 30 and 36km.&lt;/p&gt;

&lt;p&gt;The gif below is another run, but it shows the map, the cooling curve, the distance travelled,
 and a histogram of all the distances recorded across the iterations as the model runs. This example also
 illustrates how the algorithm can fail. Here it’s pretty obvious that starting at the Lord Byron Inn
 and ending at the Tally Ho is not going to be the optimum route.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;gfyitem&quot; data-id=&quot;SharpReflectingAntbear&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-favourite-pubs&quot;&gt;My favourite pubs&lt;/h2&gt;

&lt;p&gt;The last gif is 5.6km route through my favourite pubs,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Cambridge Brew House&lt;/li&gt;
  &lt;li&gt;The Eagle Public House&lt;/li&gt;
  &lt;li&gt;The Regal&lt;/li&gt;
  &lt;li&gt;The Flying Pig&lt;/li&gt;
  &lt;li&gt;The Cambridge Blue&lt;/li&gt;
  &lt;li&gt;The Elm Tree&lt;/li&gt;
  &lt;li&gt;Old Spring Public House&lt;/li&gt;
  &lt;li&gt;King Street Run Public House&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&quot;gfyitem&quot; data-id=&quot;HarmoniousBlackIrrawaddydolphin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once again, a quick visual inspection shows that some travel time could be saved with minor
 tweaks to the last graph. While I still have long term plans to make a Cambridge interactive
 pub crawl app via R (and shiny), for now the following XKCD plot sums up what this has taught me -
 I just found a really complicated way to plot a pub crawl route which can be easily beaten
 by a person, as long as you’re planning on visiting less than 20ish pubs.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/crawl_2_xkcd.png&quot;&gt;&lt;img src=&quot;/images/crawl_2_xkcd.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;An XKCD cartoon on the Travelling Salesman Problem.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;my-function&quot;&gt;My function&lt;/h2&gt;

&lt;p&gt;I wrapped up the code&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; in a function, which can be called from github.&lt;/p&gt;

&lt;h3 id=&quot;load-the-function&quot;&gt;Load the function&lt;/h3&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;devtools&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;devtools&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
source_gist&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://gist.github.com/epijim/8f4be4dae598e479add0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;ggmap&lt;/code&gt; is required to run this function.&lt;/p&gt;

&lt;h3 id=&quot;input-variables&quot;&gt;Input variables&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;v_pubs&lt;/code&gt; - either a list of pubs &lt;code&gt;c(pub1,pub2)&lt;/code&gt; or a dataset with the latitude in
 the first column and the longitude in the second. If feeding in a dataset, you also
 need to set &lt;code&gt;cam_pubs=FALSE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;crow_distances&lt;/code&gt; - defaults to &lt;code&gt;FALSE&lt;/code&gt;. If set to &lt;code&gt;FALSE&lt;/code&gt;, and &lt;code&gt;cam_pubs=TRUE&lt;/code&gt; (the default),
 the function will calculate the best route using Google maps based distance or time to walk. If
 &lt;code&gt;crow_distances=TRUE&lt;/code&gt;, the function will use straight line distances (taking into
   account the Earth’s curvature). If &lt;code&gt;cam_pubs=FALSE&lt;/code&gt;,
 the function will always use straight line (&lt;em&gt;as the crow flies&lt;/em&gt; data).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;units&lt;/code&gt; - Defaults to &lt;code&gt;&quot;minutes&quot;&lt;/code&gt;, which makes the function calculate the route based on
 the Google maps derived walking time. Can also be set to &lt;code&gt;&quot;metres&quot;&lt;/code&gt;, which will make the
 function use and report the distance of the crawl in metres based on Google maps directions.
 This option is only evaluated if &lt;code&gt;crow_distances=FALSE&lt;/code&gt; and you are using the
 inbuilt pub data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;v_location&lt;/code&gt; - defaults to &lt;code&gt;&quot;Cambridge, UK&quot;&lt;/code&gt;. This value is given to &lt;code&gt;ggmap&lt;/code&gt; when pulling
 the base map. Only really needed if feeding in a different dataset. If using a different
 basemap, &lt;code&gt;v_zoom&lt;/code&gt; will allow the zoom on the base map to be set.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;listpubs&lt;/code&gt; - defaults to &lt;code&gt;FALSE&lt;/code&gt;. If set to &lt;code&gt;TRUE&lt;/code&gt; the function will print the list of pubs
 and then exit the function (ignoring all other options and not running the model). I
 added this as the pub names need to be entered in perfectly into &lt;code&gt;v_pubs&lt;/code&gt; for it to
 work.&lt;/p&gt;

&lt;h3 id=&quot;use&quot;&gt;Use&lt;/h3&gt;

&lt;p&gt;The function, when loaded, will pull data from another gist which has the pubs in it.
 You can see the names of the pubs by typing &lt;code&gt;jb_pubdistance(listpubs=T)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical call to the function would be:&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;results &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; jb_pubdistance&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;v_pubs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The Maypole P.H.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The Eagle Public House&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;s&quot;&gt;&amp;quot;Pickerel Inn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Baron Of Beef&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the example above, we will get the default format for the results, which is based on
 what google claims is the default walking time. See &lt;em&gt;Input variables&lt;/em&gt; above on how to
 feed in custom data, or get back the distance in metres in actual walking routes, or as
 the crow flies.&lt;/p&gt;

&lt;p&gt;So by setting &lt;code&gt;&amp;lt;-&lt;/code&gt;, we created an object called &lt;code&gt;results&lt;/code&gt;. The following
 results are stored.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;results$distance&lt;/code&gt; - the distance of the pub crawl&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;results$pubs_inorder&lt;/code&gt; - the pubs in order. If using my pubs data, it will give some info on the pubs. If feeding in custom lats and lons, it will be the original dataset in trip order.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;results$temperature&lt;/code&gt; - the temperature values used over the iterations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function will also return a plot showing the route.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Icosian_game&quot;&gt;Icosian game&lt;/a&gt; was a peg based game invented in 1857. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;This function just gives the final route, not the gifs of how the model was fit. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

        </content>
    </entry>
    
</feed>
